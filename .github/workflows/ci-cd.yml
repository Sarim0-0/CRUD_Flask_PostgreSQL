name: Flask CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:

jobs:
  # -----------------------
  # 1️⃣ BUILD & INSTALL
  # -----------------------
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Verify installation
        run: python -m flask --version

  # -----------------------
  # 2️⃣ LINT / SECURITY SCAN
  # -----------------------
  lint:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install lint tools
        run: |
          pip install flake8 bandit
      - name: Run flake8 (Lint)
        run: flake8 --ignore=E501 .
      - name: Run Bandit (Security Scan)
        run: bandit -r app.py

  # -----------------------
  # 3️⃣ TEST (WITH POSTGRES)
  # -----------------------
  test:
    runs-on: ubuntu-latest
    needs: lint
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: lin_flask
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d lin_flask"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
    env:
      DATABASE_URI: postgresql://postgres:password@localhost:5432/lin_flask
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -U postgres -d lin_flask; do
            echo "Waiting for database..."
            sleep 2
          done
      - name: Run tests
        run: pytest -v

  # -----------------------
  # 4️⃣ BUILD DOCKER IMAGE
  # -----------------------
  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Log in to DockerHub
        if: env.DOCKER_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        run: docker build -t flask-lab:${{ github.sha }} .
      - name: List images
        run: docker images

  # -----------------------
  # 5️⃣ DEPLOY (CONDITIONAL)
  # -----------------------
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy Application
        run: |
          echo "✅ Deployment started because branch = main and all tests passed!"
          # You can replace this with real deploy logic, e.g.:
          # docker run -d -p 5000:5000 flask-lab:${{ github.sha }}
